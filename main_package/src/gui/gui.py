# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
TOPICS

GPS:
static const std::string GPS_TOPIC = "/move_base_simple/goal_fix";
static const std::string PUBLISH_TOPIC_GPS = "move_base_simple/gps";

IMAGE:
"/camera/image_raw"

OCC:
"/occupancy_grid"
"""

from PyQt5 import QtCore, QtGui, QtWidgets
import rospy
from std_msgs.msg import String, Image
from cv_bridge import CvBridge
import nav_msgs.msg import OccupancyGrid
import numpy as np

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(380, 0, 421, 551))
        self.widget.setObjectName("widget")
        self.widget.setStyleSheet("border: 2px solid red;")

        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setGeometry(QtCore.QRect(120, 500, 80, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setGeometry(QtCore.QRect(240, 500, 80, 23))
        self.pushButton_2.setObjectName("pushButton_2")

        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(0, 0, 191, 80))
        self.widget_2.setObjectName("widget_2")
        self.widget_2.setStyleSheet("border: 2px solid green;")

        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setGeometry(QtCore.QRect(190, -1, 191, 81))
        self.widget_3.setObjectName("widget_3")
        self.widget_3.setStyleSheet("border: 2px solid blue;")

        self.widget_4 = QtWidgets.QWidget(self.centralwidget)
        self.widget_4.setGeometry(QtCore.QRect(0, 80, 381, 471))
        self.widget_4.setObjectName("widget_4")
        self.widget_4.setStyleSheet("border: 2px solid orange;")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 20))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # GPS Subcriber
        self.gps_subscriber1 = rospy.Subscriber("/move_base_simple/goal_fix", String, self.update_gps_data_1)
        self.gps_subscriber2 = rospy.Subscriber("/move_base_simple/gps", String, self.update_gps_data_2)

        # Camera Subscriber
        self.camera_subscriber = rospy.Subscriber("/CAMERA_TOPIC", Image, self.update_camera_image) # topic ismi docker'dan bakılarak değiştirilecek
        self.bridge = CvBridge()

        # Occupancy Subscriber
        self.occupancy_grid_subscriber = rospy.Subscriber("/occupancy_grid", OccupancyGrid, self.update_occupancy_grid)
        self.occupancy_grid_data = None

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Start"))
        self.pushButton_2.setText(_translate("MainWindow", "Stop"))

    def update_gps_data_1(self, data):
        gps_data = data.data
        self.widget_2.setText(gps_data)

    def update_gps_data_2(self, data):
        gps_data = data.data
        self.widget_3.setText(gps_data)

    def update_camera_image(self, data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
            
            height, width, channel = cv_image.shape
            bytes_per_line = 3 * width
            q_img = QtGui.QImage(cv_image.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)

            pixmap = QtGui.QPixmap.fromImage(q_img)
            pixmap = pixmap.scaled(self.widget_4.width(), self.widget_4.height(), QtCore.Qt.KeepAspectRatio)
            self.widget_4.setPixmap(pixmap)

        except Exception as e:
            print("Cannot play image", e)

    def update_occupancy_grid(self, data):
        self.occupancy_grid_data = data

        if self.occupancy_grid_data is not None:
            occupancy_data = self.occupancy_grid_data.data
            occupancy_data = np.array(occupancy_data).reshape(self.occupancy_grid_data.info.height, self.occupancy_grid_data.info.width)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
